From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nassim Jahnke <nassim@njahnke.dev>
Date: Sun, 26 Jul 2020 14:44:16 +0200
Subject: [PATCH] More lightning API


diff --git a/src/main/java/org/bukkit/entity/LightningStrike.java b/src/main/java/org/bukkit/entity/LightningStrike.java
index 8dc433baba7060df5cfe6fc10210a5a27287987d..5298d6c77d2a395bfb9d7db8cc81aa5e2db4b4b9 100644
--- a/src/main/java/org/bukkit/entity/LightningStrike.java
+++ b/src/main/java/org/bukkit/entity/LightningStrike.java
@@ -34,37 +34,6 @@ public interface LightningStrike extends Entity {
      */
     public void setFlashes(int flashes);
 
-    /**
-     * Get the amount of ticks this lightning strike will inflict damage
-     * upon its hit entities.
-     * <p>
-     * When life ticks are negative, there is a random chance that another
-     * flash will be initiated and life ticks reset to 1.
-     *
-     * @return the life ticks
-     */
-    public int getLifeTicks();
-
-    /**
-     * Get the amount of ticks this lightning strike will inflict damage
-     * upon its hit entities.
-     * <p>
-     * When life ticks are negative, there is a random chance that another
-     * flash will be initiated and life ticks reset to 1. Additionally, if
-     * life ticks are set to 2 (the default value when a lightning strike
-     * has been spawned), a list of events will occur:
-     * <ul>
-     *   <li>Impact sound effects will be played
-     *   <li>Fire will be spawned (dependent on difficulty)
-     *   <li>Lightning rods will be powered (if hit)
-     *   <li>Copper will be stripped (if hit)
-     *   <li>{@link GameEvent#LIGHTNING_STRIKE} will be dispatched
-     * </ul>
-     *
-     * @param ticks the life ticks
-     */
-    public void setLifeTicks(int ticks);
-
     /**
      * Get the {@link Player} that caused this lightning to strike. This
      * will occur naturally if a trident enchanted with
@@ -76,13 +45,6 @@ public interface LightningStrike extends Entity {
     @Nullable
     public Player getCausingPlayer();
 
-    /**
-     * Set the {@link Player} that caused this lightning to strike.
-     *
-     * @param player the player
-     */
-    public void setCausingPlayer(@Nullable Player player);
-
     // Spigot start
     /**
      * @deprecated Unsupported api
@@ -111,4 +73,72 @@ public interface LightningStrike extends Entity {
     @Deprecated // Paper
     Spigot spigot();
     // Spigot end
+
+    // Paper start
+    /**
+     * Returns the amount of flash iterations that will be done before the lightning dies.
+     *
+     * @see #getLifeTicks() for how long the current flash will last
+     * @return amount of flashes that will be shown before the lightning dies
+     */
+    int getFlashCount();
+
+    /**
+     * Sets the amount of life iterations that will be done before the lightning dies.
+     * Default number of flashes on creation is between 1-3.
+     *
+     * @param flashes amount of iterations that will be done before the lightning dies, must to be a positive number
+     */
+    void setFlashCount(int flashes);
+
+    /**
+     * Returns the amount of ticks the current flash will do damage for.
+     * Starts with 2 by default, will damage while it is equal to or above 0, with the next flash beginning somewhere between 0 and -9.
+     *
+     * @return ticks the current flash will do damage for
+     */
+    int getLifeTicks();
+
+    /**
+     * Sets the amount of ticks the current flash will do damage/fire for.
+     * Default is 2 for each flash, on which the sound and effect will also be played.
+     *
+     * @param lifeTicks ticks the current flash will do damage for
+     */
+    void setLifeTicks(int lifeTicks);
+
+    /**
+     * Returns the potential entity that caused this lightning strike to spawn in the world.
+     * <p>
+     * As of implementing this method, only {@link Player}s are capable of causing a lightning strike, however as this
+     * might change in future minecraft releases, this method does not guarantee a player as the cause of a lightning.
+     * Consumers of this method should hence validate whether or not the entity is a player if they want to use player
+     * specific methods through an {@code instanceOf} check.
+     * </p>
+     * <p>
+     * A player is, as of implementing this method, responsible for a lightning, and will hence be returned here as
+     * a cause, if they channeled a {@link Trident} to summon it or were explicitly defined as the cause of this
+     * lightning through {@link #setCausingPlayer(Player)}.
+     * </p>
+     *
+     * @return the entity that caused this lightning or null if the lightning was not caused by a entity (e.g. normal
+     * weather)
+     */
+    @org.jetbrains.annotations.Nullable
+    Entity getCausingEntity();
+
+    /**
+     * Updates the player that caused this lightning to be summoned into the world.
+     * By default, players that channel their {@link Trident} will be the cause of the respective lightning.
+     * <p>
+     * While the respective getter method {@link #getCausingEntity()} does not guarantee a player as the cause of a
+     * lightning to stay as future proof as possible, as of implementing this method, players are the only entities
+     * that can cause a lightning strike and hence this setter is restricted to players.
+     * </p>
+     *
+     * @param causingPlayer the player that should be the new cause of this lightning. {@code null} may be passed to
+     *                      indicate that no player is responsible for this lightning.
+     */
+    void setCausingPlayer(@org.jetbrains.annotations.Nullable Player causingPlayer);
+    // Paper end
 }
